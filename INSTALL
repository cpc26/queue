GNU Queue load-balancing/batch processing system

Copyright 1998-2000 W. G. Krebs (see file 'COPYING' for terms of GPL license)
<wkrebs@gnu.org>

GNU Queue is distributed in the hope that it is useful but comes 
with absolutely no warranty; see file `COPYING' for details.

Platforms
=========

GNU Queue has been reported successfully installed with full
functionality on at least the following platforms:

RedHat GNU/Linux 5.x, SuSE GNU/Linux, HP-UX 9.x and 10.x, 
SunOS, and Solaris 4.2.

The package probably compiles and runs relatively problem free on a number of
additional platforms; please report your experiences to <bug-queue@gnu.org>.

For help porting the software to other platforms, subscribe to the 
development list via the web pages,
<http://www.gnuqueue.org>


Basic Installation
==================

Queue load balancing system 

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to <bug-queue@gnu.org> so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.


The simplest way to compile and install Queue is:

  1. Decide whether you want a cluster-wide installation (root
privileges required) for every user on the system or you wish
to install GNU Queue only for a single user (usually, yourself;
no special privileges required.)

  2. a. Single user installation (default) ---

     `cd' to the directory containing Queue's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

      b. Cluster-wide, all-user installation:

     `cd' to the directory containing Queue's source code and type
     `./configure --enable-root' to configure the package for your system.  
     If you're using `csh' on an old version of System V, you 
     might need to type `sh ./configure --enable-root' instead to 
     prevent `csh' from trying to execute `configure' itself.

     For the all-user intallation, if you want to install the 
     GNU Queue executables in something other
     than /usr/local/bin, /usr/local/sbin and want to put the
     NFS-shared spool directory somewhere other than  
     /usr/local/com/queue
     you can use the --bindir, --sbindir, and --sharedstatedir
     options to configure. For example, running 

`./configure --enable-root --bindir=/usr/gnu/local \
       --sbindir=/usr/gnu/etc --sharedstate-dir=/usr/gnu/com'

     would install the user executables in /usr/gnu/local, the system programs
     in /usr/gnu/etc, and the NFS-shared spool directory in
     /usr/gnu/com/queue  when `make install' is run.

    Or, you could simply use the --prefix option:

`./configure --enable-root --prefix=/usr/gnu'

     Similar options apply to the single-user installation (minus
     the --enable-root option) except that the default prefix is
     the current directory. Since this usually resides in
     a user's home directory (which, in a cluster, is typically
     NFS-shared) this is a sensible default for this installation
     mode. 

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  3. Type `make' to compile the package. You may want to use GNU make
     here (aka "gmake" or "gnumake") as some vendors' makes have trouble
     with the Makefile produced by GNU autoconf. You may need to tweak the
     Makefile if you do not have GCC installed. With gnumake and gcc installed,
     compiling should be trouble-free on most platforms; if not, write
     <bug-queue@gnu.org>

  4. As root on the server for /usr/spool (typically the local machine), 
     type `make install' to install the programs and create the
     spool directory for Queue. 

     If you want to install Queue on additional machines in the cluster that
     have mounted the spool directory (/usr/spool/queue is the default)
     run `make install-exec' to install the binaries on these machines and
     add the hosts to the host access control list.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

  6. If you decide you want to uninstall Queue, type `make uninstall'
     from the source code directory. This removes the system binaries and
     deletes the spool directory, if present. For this to work, a Makefile
     will need to be present, if you ran `make distclean' you will need to
     run `configure' again to re-generate one with the appropriate settings
     for your site.

For additional information, please refer to the manuals in the `doc/'
directory (including the complete documentation in Texinfo format) and
the `README' file in this directory.

If you need additional help (including subscribing to our development
mailing list for porting help) be sure to check our web home page,
at <http://www.gnuqueue.org>

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

GNU Queue pays attention to the `--enable-root' features, which informs
GNU Queue to perform the preferred cluster-wide, multi-user installation
rather than the default installation mode for a single user.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.
